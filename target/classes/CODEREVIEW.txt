1 - Code review
ProcessRuleServices
	- Varias instancia estão inicializadas dentro do metodo do Work
	- EntityFactoy poderia ser declarado como um atributo da classe e ser inicializado
	usuando injeção de dependência através da anotação @Autowired
	- Poderia existir uma interface definindo de maneira mais coesa quais são as fucionalidadess do Serviço.
	- Está sendo passado um arraylist de inteiros vazios para o método processValue da classe entityFactory.
	- Não há comentário no código ou documentação javadoc.
EntityFactory
		- Método doSomething não está implementado
		- Dentro do metodo processValue está sendo passado dados mockados para o método processAddressValue
		- Dentro do metodo processAddressValue existe um log de erro fora de uma tratativa de erro.
		- O método callExternalRestService não está implementado.
		- Não há clareza no objetivo da classe EntityFactory
		- Não existe uma interface que defina as funcionalidades dessa EntityFactory.
		- Não há comentário no código ou documentação javadoc.
PojoExample:
	classe sem atributos o métodos.
	
		
2- Healthcheck:
R: Biblioteca que pode ser utilizada:
	Existe a biblioteca actuator do spring boot. Podemos checar através da seguinte url:
		http://localhost:8080/actuator/health
	endpoint de healcheck criado:
	http://localhost:8080/healthcheck
	
endpoint healcheck
	microserviço disponivel
	
3 - Implementar serviços de consulta de CEP:
R:
Busca por cep:
	url: http://localhost:8080/buscar-endereco-hystrix/01451912 ou http://localhost:8080/buscar-endereco
	Método: get
	Headers:
		 Content-Type: application/json

	
	

Busca por lista de ceps:
	url : localhost:8080/buscar-enderecos
	Método: post
	Headers:
		 Content-Type: application/json
		 
	Body:
		["01311000",
		"01451912"]

	
4 -Implementação de Cache:
 
R:
	Foi utlizada a api do Spring cache. Na classe de inicialização foi adicionada a 
	anotação @EnableCaching e no endpoint dos serviços foi utilizado anotação cacheable. O motivo da escolha
	foi pela facilidade e praticidade de implementação.
	
 
5 -Service Discovery e Perfil:
R: 
Para a configuração service discovery foi feito a seguinte configuração
	Classe inicializacao do spring boot
	Foi adicionado a anotação @EnableEurekaServer
	Arquivo application-dev ficou com a configuração de eureka server habilitado
		eureka:
		  instance:
				hostname: localhost
			  client:
				registerWithEureka: true
				fetchRegistry: false
				serviceUrl:
				  defaultZone: http://${eureka.instance.hostname}:${server.port}/eureka/
		
Configuração de perfis	
	Foram criadas configurações para rodar com o perfil de dev  e hml.
	Exemplo variavel de ambiente configurada para o projeto:
	 spring.profiles.active=dev ou spring.profiles.active=hml
	 Arquivos de configuração:
		application-dev e application-hml



6- Tolerância a falhas:
R:
	Para que nosso endpoint não retorne uma resposta de erro genérica, poderiamos criar um novo método para
	chamarmos caso haja na chamada ao serviços de busca por cep. Abaixo exemplo criado na aplicação:
	
		/* 
	 * Implementacao sem tratamento de erro para testar o hystrix
	 * */
	@Override
	@HystrixCommand(fallbackMethod = "findEnderecoErro")
	public ResponseDefault<Endereco> findEnderecoByCEPHystrix(String cep) {
		
		Endereco endereco = enderecoServiceConsumes.findEnderecoByCep(cep);
		ResponseDefault<Endereco> response = new ResponseDefault<Endereco>(endereco, ResponseDefault.SUCESSO);
		return response;
		
	}

	/** metodo chamada no caso de falha na busca de endereço por cep */
	public ResponseDefault<Endereco> findEnderecoErro(String cep) {
		
		return new ResponseDefault<Endereco>(null, ResponseDefault.ERRO);
	}

		